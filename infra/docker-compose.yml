services:
  postgres-base: &postgres-base
    image: postgres:13
    volumes:
      - dbstorage:/var/lib/postgresql/data
    expose: [5432]
    restart: always
    env_file: [.env]
    profiles: ["never"]

  postgres:
    extends: postgres-base
    profiles: ["all", "admin", "etl"]

  postgres-dev:
    <<: *postgres-base
    ports: [5432:5432]
    env_file: [.env.dev]
    profiles: ["admin-dev", "etl-dev", "api-dev", "idp-dev", "init"]


  admin:
    build:
      context: ./../admin
    depends_on: [postgres]
    expose: [8000]
    environment:
      - DEBUG:True
    env_file: [.env]
    profiles: ["all", "admin"]


  admin-nginx:
    build:
      context: ./../admin
      dockerfile: nginx/Dockerfile
    depends_on: [admin]
    restart: always
    volumes:
      - ./../admin/nginx/configs/admin.conf:/etc/nginx/conf.d/configs/admin.conf
      - ./../admin/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports: [80:80]
    profiles: ["all", "admin"]


  elasticsearch-base: &elasticsearch-base
    image: elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - esstorage:/usr/share/elasticsearch/data
    expose: [9200]
    restart: always
    profiles: ["never"]

  elasticsearch:
    <<: *elasticsearch-base
    profiles: ["all", "etl", "api"]

  elasticsearch-dev:
    <<: *elasticsearch-base
    ports: ["9200:9200"]
    profiles: ["etl-dev", "api-dev"]

  elasticsearch-clean:
    <<: *elasticsearch-base
    volumes: [] # must be created on fly
    profiles: ["api-test"]

  etl:
    build:
      context: ./../etl
    environment:
      - .env
    depends_on:
      - postgres
      - elasticsearch
    restart: on-failure
    env_file:
      - .env
    profiles: ["all", "etl"]

  ### Redis containers
  redis-base: &redis-base
    image: redis
    restart: always
    expose: [6379]
    command: redis-server --save 20 1 --loglevel warning
    profiles: ["never"]
  
  redis:
    <<: *redis-base
    volumes: [redisstorage:/data]
    ports: [6379:6379]
    profiles: ["all", "api", "api-dev", "etl", "etl-dev"]

  redis-clean:
    <<: *redis-base
    volumes: [] # must be created on the fly
    profiles: ["api-test"]

  api:
    build:
      context: ./../api
    ports: [26452:26452]
    depends_on: [elasticsearch, redis]
    env_file: [.env]
    profiles: ["all", "fastapi"]

  api-test:
    build:
      context: ./../api
    env_file: [.env, .env.test]
    expose: [26452]
    depends_on: [elasticsearch-clean, redis-clean]
    profiles: ["api-test"]

  api-func-test:
    build:
      context: ./../api/tests/functional
    depends_on:
      - elasticsearch-clean
      - redis-clean
      - api-test
    env_file: [.env, .env.test]
    # Filter tests" -k test_list_films_by_genre
    entrypoint: >
      sh -c "ls && pwd && cd /opt
      && python3 -m functional.utils.wait_for_es
      && python3 -m functional.utils.wait_for_redis
      && pytest ./functional/tests"
    profiles: ["api-test"]

  minio-base:
    image: minio/minio
    expose: [9000]
    ports: [9000:9000] # for download images
    env_file: [.env]
    volumes:
      - minio_storage:/data
    command: server --console-address ":9001" /data
    profiles: ["never"]

  minio:
    extends: minio-base
    profiles: ["all", "admin"]

  minio-dev:
    extends: minio-base
    ports: [9001:9001]
    env_file: [.env.dev]
    profiles: ["admin-dev", "api-dev"]

  fileapi-base: &fileapi-base
    build:
      context: ./../file_service
      dockerfile: Dockerfile
    expose: [22738]
    env_file: [.env]
    profiles: ["never"]
  
  fileapi:
    <<: *fileapi-base
    depends_on: [postgres, minio]
    profiles: ["all", "admin"]

  fileapi-dev:
    <<: *fileapi-base
    ports: [22738:22738]
    depends_on: [postgres-dev, minio-dev]
    env_file: [.env.dev]
    profiles: ["admin-dev", "api-dev"]

  postgres-init:
    build:
      context: ./../postgres_init
      dockerfile: Dockerfile
    env_file: [.env, .env.dev]
    depends_on: [postgres-dev]
    restart: "no"
    stdin_open: true
    profiles: ["init"]

  idp:
    build:
      context: ./../idp
    expose: [29543]
    depends_on: [postgres]
    env_file: [.env]
    profiles: ["all", "fastapi"]

  keycloak:
    build:
      context: ./../idp/keycloak
    ports: [32546:8080]
    depends_on: [postgres-dev]
    env_file: [.env, .env.dev]
    profiles: [idp-dev]

volumes:
  dbstorage:
    name: admin-panel-db
    external: true
  esstorage:
    name: admin-panel-es
    external: true
  redisstorage:
    name: admin-panel-redis
    external: true
  minio_storage:
    name: admin-panel-s3
    external: true


